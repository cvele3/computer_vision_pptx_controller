import cv2
import mediapipe as mp
import pyautogui

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# Finger tips for index, middle, ring, pinky
FINGER_TIPS = [8, 12, 16, 20]

# -------------------------------------------------------
# 1. COUNT FINGERS
# -------------------------------------------------------
def count_fingers(hand_landmarks):
    """
    Count how many fingers are up, ignoring the thumb for simplicity.
    This function uses a simple rule:
       - If the tip landmark’s y is above (less than) the PIP landmark’s y, the finger is considered "up."
    """
    if hand_landmarks is None:
        return 0

    finger_count = 0

    # Index, Middle, Ring, Pinky
    for tip_index in FINGER_TIPS:
        tip_y = hand_landmarks.landmark[tip_index].y
        pip_y = hand_landmarks.landmark[tip_index - 2].y  # The landmark just below the tip

        if tip_y < pip_y:
            finger_count += 1
    
    # (Optional) Basic thumb check:
    # Let's consider the thumb "up" if tip (landmark 4) is to the left of landmark 3 (assuming right hand)
    # or to the right if it's a left hand. This part can be tricky depending on orientation.
    # For simplicity, skipping the thumb in the count. If you want, you can implement advanced logic here.

    return finger_count

# -------------------------------------------------------
# 2. MAPPING FINGER COUNTS TO POWERPOINT ACTIONS
# -------------------------------------------------------
def map_finger_count_to_action(finger_count):
    """
    Maps the number of fingers to specific PowerPoint actions using pyautogui.
    You can customize these mappings as you wish.
    
    Proposed Mapping:
     - 1 finger: Next slide
     - 2 fingers: Previous slide
     - 3 fingers: Start/Stop Presentation Mode (toggle F5/ESC)
     - 4 fingers: Blank screen (B)
     - 5 fingers: Play/Stop video (Space key)
     - 0 or anything else: No action (or debug)
    """

    if finger_count == 1:
        print("Action: Next Slide")
        pyautogui.press('right')

    elif finger_count == 2:
        print("Action: Previous Slide")
        pyautogui.press('left')

    elif finger_count == 3:
        # We'll assume if the presentation is not started yet, F5 will start it,
        # otherwise ESC will end it. Here, I'm just pressing F5 for demonstration.
        print("Action: Toggle Presentation Mode (F5)")
        pyautogui.press('f5')

    elif finger_count == 4:
        print("Action: Blank Screen (B)")
        pyautogui.press('b')

    elif finger_count == 5:
        print("Action: Play/Stop Video (Space)")
        pyautogui.press('space')

    else:
        # 0 or any count outside 1-5
        print("No mapped action for finger count =", finger_count)

# -------------------------------------------------------
# 3. MAIN LOOP
# -------------------------------------------------------
def main():
    # Initialize the webcam
    cap = cv2.VideoCapture(0)  # 0 = default webcam

    # Configure MediaPipe Hands
    with mp_hands.Hands(
        model_complexity=1,
        max_num_hands=1,  # Track only one hand for simplicity
        min_detection_confidence=0.5,
        min_tracking_confidence=0.5
    ) as hands:
        while True:
            success, frame = cap.read()
            if not success:
                print("Ignoring empty camera frame.")
                continue

            # Flip horizontally for a mirror-like view
            frame = cv2.flip(frame, 1)

            # Convert the BGR frame to RGB
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Process the frame with MediaPipe
            results = hands.process(frame_rgb)

            # If we have hand landmarks, draw them and count fingers
            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    # Draw the hand annotations on the frame
                    mp_drawing.draw_landmarks(
                        frame,
                        hand_landmarks,
                        mp_hands.HAND_CONNECTIONS
                    )
                    
                    # Count fingers
                    fingers_up = count_fingers(hand_landmarks)
                    
                    # Show finger count on the frame (for debugging/feedback)
                    cv2.putText(
                        frame,
                        f"Fingers: {fingers_up}",
                        (50, 50),
                        cv2.FONT_HERSHEY_SIMPLEX,
                        1, (0, 255, 0), 2
                    )

                    # Map finger count to a PowerPoint action
                    map_finger_count_to_action(fingers_up)

            # Display the live frame
            cv2.imshow("PowerPoint Gesture Control - Press Q to Quit", frame)

            # Press 'Q' to exit
            if cv2.waitKey(5) & 0xFF == ord('q'):
                break

    # Release the camera and close windows
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
